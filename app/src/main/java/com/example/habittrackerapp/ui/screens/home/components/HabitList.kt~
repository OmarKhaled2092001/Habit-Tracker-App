package com.example.habittrackerapp.ui.screens.home.components

import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.material3.Icon
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import com.example.habittrackerapp.R
import com.example.habittrackerapp.data.HabitItem
import com.example.habittrackerapp.ui.SwipeableHabitCard

@Composable
fun HabitList(
    habits: List<HabitItem>,
    onHabitAction: (HabitItem, HabitAction) -> Unit
) {
    Column {
        Row(
            horizontalArrangement = Arrangement.SpaceBetween,
            modifier = Modifier.fillMaxWidth()
        ) {
            Text("Habits", fontWeight = FontWeight.Bold)
            Text("View All", color = Color.Blue)
        }

        Spacer(modifier = Modifier.height(8.dp))

        if (habits.isEmpty()) {
            Column(
                modifier = Modifier.fillMaxWidth(),
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                Icon(
                    painter = painterResource(id = R.drawable.no_data),
                    contentDescription = "No habits",
                    modifier = Modifier.padding(16.dp)
                )
                Text("No habits yet!")
            }
        } else {
            LazyColumn(
                verticalArrangement = Arrangement.spacedBy(12.dp),
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(bottom = 80.dp)
            ) {
                items(habits) { habit ->
                    SwipeableHabitCard(
                        habitName = habit.name,
                        emoji = habit.emoji,
                        onDone = { onHabitAction(habit, HabitAction.DONE) },
                        onView = { onHabitAction(habit, HabitAction.VIEW) },
                        onFail = { onHabitAction(habit, HabitAction.FAIL) },
                        onSkip = { onHabitAction(habit, HabitAction.SKIP) }
                    )
                }
            }
        }
    }
}

sealed class HabitAction {
    object DONE : HabitAction()
    object VIEW : HabitAction()
    object FAIL : HabitAction()
    object SKIP : HabitAction()
}