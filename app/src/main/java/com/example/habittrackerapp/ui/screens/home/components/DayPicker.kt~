// components/DayPicker.kt
package com.example.habittrackerapp.ui.screens.home.components

import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import java.time.DayOfWeek
import java.time.LocalDate
import java.time.format.TextStyle
import java.util.*

@Composable
fun DayPicker(
    selectedDate: LocalDate,
    weekDates: List<LocalDate>,
    onDateSelected: (LocalDate) -> Unit,
    modifier: Modifier = Modifier
) {
    Row(
        modifier = modifier
            .fillMaxWidth()
            .padding(vertical = 8.dp),
        horizontalArrangement = Arrangement.SpaceBetween
    ) {
        weekDates.forEach { date ->
            DayItem(
                date = date,
                isSelected = date == selectedDate,
                onClick = { onDateSelected(date) }
            )
        }
    }
}

@Composable
private fun DayItem(
    date: LocalDate,
    isSelected: Boolean,
    onClick: () -> Unit
) {
    val backgroundColor = if (isSelected) MaterialTheme.colorScheme.primary else Color.Transparent
    val textColor = if (isSelected) Color.White else MaterialTheme.colorScheme.onBackground

    Column(
        modifier = Modifier
            .width(40.dp)
            .clip(RoundedCornerShape(8.dp))
            .background(backgroundColor)
            .clickable { onClick() }
            .padding(vertical = 8.dp),
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Text(
            text = date.dayOfWeek.getDisplayName(TextStyle.SHORT, Locale.getDefault()),
            color = textColor,
            fontSize = 12.sp,
            fontWeight = FontWeight.Medium
        )
        Spacer(modifier = Modifier.height(4.dp))
        Text(
            text = date.dayOfMonth.toString(),
            color = textColor,
            fontSize = 16.sp,
            fontWeight = FontWeight.Bold,
            textAlign = TextAlign.Center
        )
    }
}





//LazyRow {
//    items(weekDates) { date ->
//        val isToday = date == LocalDate.now()
//        val isSelected = date == selectedDate
//
//        Column(
//            modifier = Modifier
//                .padding(end = 12.dp)
//                .background(Color.White, RoundedCornerShape(10.dp))
//                .border(
//                    width = 1.dp,
//                    color = when {
//                        isToday -> Color.Blue
//                        isSelected -> Color.Green // Highlight selected date
//                        else -> Color(0xFFA5A6A9)
//                    },
//                    shape = RoundedCornerShape(15.dp)
//                )
//                .padding(vertical = 12.dp, horizontal = 12.dp)
//                .clickable { viewModel.setSelectedDate(date) }
//        ) {
//            Text(
//                text = date.dayOfMonth.toString(),
//                fontSize = 22.sp,
//                fontWeight = FontWeight.Bold,
//                color = when {
//                    isToday -> Color.Blue
//                    isSelected -> Color.Green
//                    else -> Color.Black
//                },
//                modifier = Modifier.align(Alignment.CenterHorizontally)
//            )
//            Text(
//                text = date.dayOfWeek.getDisplayName(TextStyle.SHORT, Locale.ENGLISH)
//                    .uppercase(),
//                color = Color.Gray
//            )
//        }
//    }
//}