package com.example.habittrackerapp.ui.screens.habit_information

import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.automirrored.filled.ArrowBack
import androidx.compose.material.icons.filled.FilterList // Changed from Edit for preview consistency
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.material3.TopAppBar
import androidx.compose.material3.TopAppBarDefaults
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
// import androidx.compose.ui.res.painterResource // Not used directly in previews if using Icon
import androidx.compose.ui.text.ExperimentalTextApi
import androidx.compose.ui.text.TextMeasurer
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.rememberTextMeasurer
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController
// import com.example.habittrackerapp.R // Assuming R.drawable.edit exists, or use a placeholder
import com.example.habittrackerapp.ui.screens.habit_information.components.*
import java.time.LocalDate
import java.time.YearMonth

// --- Previews ---

// Preview colors are already defined in HabitInformationColors.kt
// val PreviewHabitBlue = Color(0xFF6A7DFF)
// val PreviewHabitPink = Color(0xFFFF6B8A)
// val PreviewHabitGreen = Color(0xFF4CAF50)

@OptIn(ExperimentalTextApi::class) // Added OptIn here
@Preview(showBackground = true, name = "Habit Screen (Blue)")
@Composable
fun HabitInformationScreenPreview_Blue() {
    val navController = rememberNavController()
    val textMeasurer = rememberTextMeasurer() // Added for WeeklyBarChart
    HabitInformationScreenContent(
        navController = navController,
        habitPrimaryColor = PreviewHabitBlue,
        habitName = "Reading",
        habitDetails = "10 min \u2022 Mon, Tue, Fri",
        habitNote = "Reading can boost concentration and improve focus. Engage in regular reading sessions!",
        currentProgress = 8,
        maxProgress = 10,
        isTimerBased = true,
        timerDurationText = "10 min",
        selectedDate = LocalDate.now(),
        currentMonth = YearMonth.of(2022, 1),
        statsDone = "150%",
        statsOverdone = "1 day",
        statsStreak = "3/3",
        statsMissed = "0",
        calendarMarkedDaysInput = mapOf(1 to "full", 3 to "partial", 4 to "missed"), // Use status strings
        chartCompletionRate = "71%",
        chartData = listOf(3f, 2f, 1f, 0f, 4f, 0f, 5f),
        chartHighlightIndex = 6,
        chartHighlightValue = "5 min",
        textMeasurer = textMeasurer // Pass textMeasurer
    )
}

@OptIn(ExperimentalTextApi::class) // Added OptIn here
@Preview(showBackground = true, name = "Habit Screen (Pink)")
@Composable
fun HabitInformationScreenPreview_Pink() {
    val navController = rememberNavController()
    val textMeasurer = rememberTextMeasurer() // Added for WeeklyBarChart
    HabitInformationScreenContent(
        navController = navController,
        habitPrimaryColor = PreviewHabitPink,
        habitName = "Paint",
        habitDetails = "10 min \u2022 Mon, Tue, Fri",
        habitNote = "Creative expression like painting can lower stress levels and improve focus. Dedicate time for your art!",
        currentProgress = 8,
        maxProgress = 10,
        isTimerBased = true,
        timerDurationText = "10 min",
        selectedDate = LocalDate.now(),
        currentMonth = YearMonth.of(2022, 1),
        statsDone = "150%",
        statsOverdone = "1 day",
        statsStreak = "3/3",
        statsMissed = "0",
        calendarMarkedDaysInput = mapOf(1 to "full", 3 to "partial", 4 to "missed"),
        chartCompletionRate = "80%",
        chartData = listOf(2f, 0f, 3f, 0f, 4f, 0f, 3f),
        chartHighlightIndex = 4,
        chartHighlightValue = "8 min",
        textMeasurer = textMeasurer // Pass textMeasurer
    )
}

@OptIn(ExperimentalTextApi::class) // Added OptIn here
@Preview(showBackground = true, name = "Habit Screen (Green - Count)")
@Composable
fun HabitInformationScreenPreview_Green() {
    val navController = rememberNavController()
    val textMeasurer = rememberTextMeasurer() // Added for WeeklyBarChart
    HabitInformationScreenContent(
        navController = navController,
        habitPrimaryColor = PreviewHabitGreen,
        habitName = "Workout",
        habitDetails = "5 reps \u2022 Daily",
        habitNote = "Regular exercise boosts mood and energy levels. Stay consistent!",
        currentProgress = 3,
        maxProgress = 5,
        isTimerBased = false,
        timerDurationText = null,
        selectedDate = LocalDate.now(),
        currentMonth = YearMonth.now(),
        statsDone = "60%",
        statsOverdone = "0 days",
        statsStreak = "5/5",
        statsMissed = "2",
        calendarMarkedDaysInput = mapOf(1 to "full", 2 to "full", 3 to "full", 4 to "missed", 5 to "full", 6 to "missed", 7 to "full"),
        chartCompletionRate = "71%",
        chartData = listOf(1f, 3f, 4f, 0f, 2f, 0f, 4f),
        chartHighlightIndex = 6,
        chartHighlightValue = "5 reps",
        textMeasurer = textMeasurer // Pass textMeasurer
    )
}

@OptIn(ExperimentalMaterial3Api::class, ExperimentalTextApi::class)
@Composable
fun HabitInformationScreenContent(
    navController: NavController,
    habitPrimaryColor: Color,
    habitName: String,
    habitDetails: String,
    habitNote: String,
    currentProgress: Int,
    maxProgress: Int,
    isTimerBased: Boolean,
    timerDurationText: String?,
    selectedDate: LocalDate,
    currentMonth: YearMonth,
    statsDone: String,
    statsOverdone: String,
    statsStreak: String,
    statsMissed: String,
    calendarMarkedDaysInput: Map<Int, String>,
    chartCompletionRate: String,
    chartData: List<Float>,
    chartHighlightIndex: Int,
    chartHighlightValue: String,
    textMeasurer: TextMeasurer // textMeasurer is now a parameter
) {
    val habitColors = remember(habitPrimaryColor) { generateHabitColors(habitPrimaryColor) }
    var rememberedSelectedDate by remember { mutableStateOf(selectedDate) }
    var rememberedCurrentMonth by remember { mutableStateOf(currentMonth) }

    val calendarMarkedDays = remember(calendarMarkedDaysInput, habitColors) {
        calendarMarkedDaysInput.mapValues { (_, status) ->
            when (status) {
                "full" -> habitColors.primary
                "partial" -> habitColors.primaryLight
                "missed" -> CalendarMarkRed
                else -> Color.Unspecified
            }
        }.filterValues { it != Color.Unspecified }
    }

    Scaffold(
        topBar = {
            TopAppBar(
                title = {
                    Column(horizontalAlignment = Alignment.CenterHorizontally, modifier = Modifier.fillMaxWidth()) {
                        Text(habitName, fontWeight = FontWeight.Bold, fontSize = 18.sp)
                        Spacer(modifier = Modifier.height(2.dp))
                        Text(habitDetails, fontSize = 12.sp, color = habitColors.onPrimaryMedium)
                    }
                },
                navigationIcon = {
                    IconButton(onClick = { /* Preview action */ }) {
                        Icon(Icons.AutoMirrored.Filled.ArrowBack, contentDescription = "Back")
                    }
                },
                actions = {
                    IconButton(onClick = { /* Preview action */ }) {
                        Icon(Icons.Default.FilterList, contentDescription = "Filter") // Using a placeholder icon
                    }
                },
                colors = TopAppBarDefaults.topAppBarColors(
                    containerColor = habitColors.primary,
                    titleContentColor = habitColors.onPrimary,
                    navigationIconContentColor = habitColors.onPrimary,
                    actionIconContentColor = habitColors.onPrimary
                )
            )
        },
        containerColor = habitColors.primary
    ) { paddingValues ->
        Column(
            modifier = Modifier
                .padding(paddingValues)
                .fillMaxSize()
        ) {
            CircularProgressSection(
                progress = currentProgress,
                maxProgress = maxProgress,
                selectedDate = rememberedSelectedDate,
                timerDurationText = if (isTimerBased) timerDurationText else null,
                colors = habitColors,
                onPreviousDay = { rememberedSelectedDate = rememberedSelectedDate.minusDays(1) },
                onNextDay = { rememberedSelectedDate = rememberedSelectedDate.plusDays(1) },
                onAddProgress = { /* TODO: Preview action */ },
                onRemoveProgress = { /* TODO: Preview action */ },
                onTagClick = { /* TODO: Preview action */ }
            )

            Column(
                modifier = Modifier
                    .fillMaxWidth()
                    .weight(1f)
                    .clip(RoundedCornerShape(topStart = 24.dp, topEnd = 24.dp))
                    .background(Color.White)
                    .verticalScroll(rememberScrollState())
                    .padding(16.dp)
            ) {
                if (habitNote.isNotBlank()) {
                    HabitNoteSection(
                        note = habitNote,
                        colors = habitColors
                    )
                    Spacer(modifier = Modifier.height(24.dp))
                }

                StatisticsSection(
                    doneValue = statsDone,
                    overdoneValue = statsOverdone,
                    streakValue = statsStreak,
                    missedValue = statsMissed
                )
                Spacer(modifier = Modifier.height(24.dp))

                CalendarSection(
                    currentMonth = rememberedCurrentMonth,
                    colors = habitColors,
                    markedDays = calendarMarkedDays,
                    onPreviousMonth = { rememberedCurrentMonth = rememberedCurrentMonth.minusMonths(1) },
                    onNextMonth = { rememberedCurrentMonth = rememberedCurrentMonth.plusMonths(1) },
                    onDateSelected = { day ->
                        rememberedSelectedDate = rememberedCurrentMonth.atDay(day)
                    }
                )
                Spacer(modifier = Modifier.height(24.dp))

                HabitPerformanceChartSection(
                    completionRate = chartCompletionRate,
                    chartData = chartData,
                    highlightIndex = chartHighlightIndex,
                    highlightValue = chartHighlightValue,
                    colors = habitColors,
                    onDetailsClick = { /* TODO: Preview action */ }
                    // textMeasurer is now handled within HabitPerformanceChartSection itself
                    // and passed down from the preview functions to HabitInformationScreenContent
                    // and then to HabitPerformanceChartSection if it were a direct parameter.
                    // However, the correction made HabitPerformanceChartSection remember its own textMeasurer,
                    // so it does not need to be passed from here if that's the final design.
                    // For consistency with the corrected HabitPerformanceChartSection, it's not passed here.
                )
                Spacer(modifier = Modifier.height(16.dp))
            }
        }
    }
}

