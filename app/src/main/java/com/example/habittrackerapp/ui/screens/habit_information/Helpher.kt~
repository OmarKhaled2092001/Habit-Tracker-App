package com.example.habittrackerapp.ui.screens.habit_information

import androidx.compose.foundation.Canvas
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.clickable // Added for DateCell
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.automirrored.filled.ArrowBack
import androidx.compose.material.icons.automirrored.filled.KeyboardArrowLeft
import androidx.compose.material.icons.automirrored.filled.KeyboardArrowRight
import androidx.compose.material.icons.filled.Close // For the 'x' mark
import androidx.compose.material.icons.filled.FilterList
import androidx.compose.material.icons.filled.KeyboardArrowLeft
import androidx.compose.material.icons.filled.KeyboardArrowRight

import androidx.compose.material3.*
import androidx.compose.runtime.Composable
import androidx.compose.runtime.Immutable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.geometry.CornerRadius
import androidx.compose.ui.geometry.Offset
import androidx.compose.ui.geometry.Size
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.PathEffect
import androidx.compose.ui.graphics.StrokeCap
import androidx.compose.ui.graphics.drawscope.DrawScope
import androidx.compose.ui.graphics.drawscope.Stroke
import androidx.compose.ui.graphics.luminance
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.AnnotatedString
import androidx.compose.ui.text.ExperimentalTextApi
import androidx.compose.ui.text.TextLayoutResult
import androidx.compose.ui.text.TextMeasurer
import androidx.compose.ui.text.TextStyle as ComposeTextStyle
import androidx.compose.ui.text.drawText
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.rememberTextMeasurer
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.Dp
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController
import com.example.habittrackerapp.R
import com.example.habittrackerapp.ui.screens.habit_information.components.CalendarSection
import com.example.habittrackerapp.ui.screens.habit_information.components.StatisticsSection
import java.time.DayOfWeek
import java.time.LocalDate
import java.time.YearMonth
import java.time.format.DateTimeFormatter
import java.time.format.TextStyle
import java.util.Locale
import kotlin.math.roundToInt

// --- Dynamic Color System ---

@Immutable // Mark as immutable for Compose performance
data class HabitColors(
    val primary: Color,
    val primaryLight: Color, // Lighter shade for chart bars, partial calendar highlight
    val primaryVeryLight: Color, // Very light shade for note background
    val onPrimary: Color, // Text/icons on primary background (Top bar, progress circle)
    val onPrimaryMedium: Color, // Less prominent text/icons on primary (habit details, timer)
    val progressTrack: Color, // Background track for progress indicator
    val smallButtonBackground: Color, // Background for +/-/# buttons
    val smallButtonContent: Color, // Content color for +/-/# buttons
    val noteIcon: Color // Icon color for note card
)

// Function to generate derived colors from a primary color
fun generateHabitColors(primary: Color): HabitColors {
    // Basic derivation logic (can be refined)
    // Blend with white to get lighter shades
    val primaryLight = primary.copy(alpha = 0.7f) // Blend(primary, Color.White, 0.3f)
    val primaryVeryLight = primary.copy(alpha = 0.1f) // Blend(primary, Color.White, 0.9f)

    // Determine contrast color based on luminance
    val onPrimary = if (primary.luminance() > 0.5f) Color.Black else Color.White

    return HabitColors(
        primary = primary,
        primaryLight = primaryLight,
        primaryVeryLight = primaryVeryLight,
        onPrimary = onPrimary,
        onPrimaryMedium = onPrimary.copy(alpha = 0.8f),
        progressTrack = Color.White.copy(alpha = 0.3f), // Keep consistent for now
        smallButtonBackground = Color.White, // Keep consistent for now
        smallButtonContent = primary, // Use primary color for icon/text on white button
        noteIcon = primary.copy(alpha = 0.8f) // Use a semi-transparent primary for the note icon
    )
}

// --- Static Colors (Less likely to change based on habit theme) ---
val LightGray = Color(0xFFF2F3F7)
val CardBackground = Color.White
val ChartLabelColor = Color.Gray
val ChartGridLineColor = Color(0xFFE0E0E0)
val TooltipText = Color.White // Tooltip text is usually on primary background

// --- Main Screen Composable ---
@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun HabitInformationScreenTest(
    navController: NavController
    // TODO: habitPrimaryColor should be provided by a ViewModel or state management.
    // Using a hardcoded default for now.
    // val habitPrimaryColor = viewModel.habitColor // Example ViewModel access
) {
    // Using a hardcoded default color for preview/testing.
    val habitPrimaryColor = Color(0xFF4CAF50) // Example default color (Green)
    // Generate the dynamic color set based on the primary color
    val habitColors = remember(habitPrimaryColor) { generateHabitColors(habitPrimaryColor) }

    var selectedDate by remember { mutableStateOf(LocalDate.now()) }
    var currentMonth by remember { mutableStateOf(YearMonth.now()) }

    Scaffold { paddingValues ->
        Column(
            modifier = Modifier
                .padding(paddingValues)
                .fillMaxSize()
        ) {
            Column(
                modifier = Modifier
                    .fillMaxWidth()
                    .weight(1f)
                    .clip(RoundedCornerShape(topStart = 24.dp, topEnd = 24.dp))
                    .background(Color.White) // Keep content background white for now
                    .verticalScroll(rememberScrollState())
                    .padding(16.dp)
            ) {

//                CalendarSection(
//                    currentMonth = currentMonth,
//                    colors = habitColors, // Pass dynamic colors
//                    // Pass dynamic colors for marked days map
//                    markedDays = mapOf(
//                        1 to habitColors.primary, // Full highlight
//                        3 to habitColors.primaryLight, // Partial highlight
//                        4 to CalendarMarkRed, // Missed (static red)
//                        6 to habitColors.primary // Full highlight
//                    ),
//                    onPreviousMonth = { currentMonth = currentMonth.minusMonths(1) /* TODO */ },
//                    onNextMonth = { currentMonth = currentMonth.plusMonths(1) /* TODO */ },
//                    onDateSelected = { day ->
//                        selectedDate = currentMonth.atDay(day)
//                        /* TODO */
//                    }
//                )
//                Spacer(modifier = Modifier.height(24.dp))


                Spacer(modifier = Modifier.height(16.dp))
            }

        }
        }
    }

// --- Component: Habit Performance Chart ---



@OptIn(ExperimentalTextApi::class)
fun drawTooltip(
    scope: DrawScope,
    textMeasurer: TextMeasurer,
    text: String,
    position: Offset,
    colors: HabitInformationColors // Use dynamic colors
) {
    with(scope) {
        val textStyle = ComposeTextStyle(color = TooltipText, fontSize = 10.sp, fontWeight = FontWeight.Bold) // Static white text
        val textLayoutResult = textMeasurer.measure(AnnotatedString(text), style = textStyle)
        val paddingHorizontal = 8.dp.toPx()
        val paddingVertical = 4.dp.toPx()
        val tooltipWidth = textLayoutResult.size.width + paddingHorizontal * 2
        val tooltipHeight = textLayoutResult.size.height + paddingVertical * 2
        val triangleSize = 6.dp.toPx()
        val tooltipY = position.y - tooltipHeight - triangleSize - 4.dp.toPx()
        val tooltipX = (position.x - tooltipWidth / 2f).coerceIn(0f, size.width - tooltipWidth)

        // Use primary color for tooltip background
        val tooltipBackgroundColor = colors.primary

        drawRoundRect(
            color = tooltipBackgroundColor,
            topLeft = Offset(tooltipX, tooltipY),
            size = Size(tooltipWidth, tooltipHeight),
            cornerRadius = CornerRadius(4.dp.toPx())
        )

        drawText(
            textLayoutResult = textLayoutResult,
            topLeft = Offset(tooltipX + paddingHorizontal, tooltipY + paddingVertical)
        )

        val triangleBaseY = tooltipY + tooltipHeight
        val trianglePath = androidx.compose.ui.graphics.Path().apply {
            moveTo(position.x - triangleSize / 2f, triangleBaseY)
            lineTo(position.x + triangleSize / 2f, triangleBaseY)
            lineTo(position.x, triangleBaseY + triangleSize * 0.8f)
            close()
        }
        drawPath(path = trianglePath, color = tooltipBackgroundColor)
    }
}


// --- Previews ---

// Define some example primary colors
val PreviewHabitBlue = Color(0xFF6A7DFF)
val PreviewHabitPink = Color(0xFFFF6B8A)
val PreviewHabitGreen = Color(0xFF4CAF50)

@Preview(showBackground = true, name = "Habit Screen (Blue)")
@Composable
fun HabitInformationScreenPreview_Blue() {
    val navController = rememberNavController()
    HabitInformationScreenContent(
        navController = navController,
        habitPrimaryColor = PreviewHabitBlue,
        selectedDate = LocalDate.now(),
        currentMonth = YearMonth.of(2022, 1),
        statsDone = "150%",
        statsOverdone = "1 day",
        statsStreak = "3/3",
        statsMissed = "0",
        calendarMarkedDaysInput = mapOf(1 to "full", 3 to "partial", 4 to "missed"), // Use status strings
        chartCompletionRate = "71%",
        chartData = listOf(3f, 2f, 1f, 0f, 4f, 0f, 5f),
        chartHighlightIndex = 6,
        chartHighlightValue = "5 min"
    )
}

@Preview(showBackground = true, name = "Habit Screen (Pink)")
@Composable
fun HabitInformationScreenPreview_Pink() {
    val navController = rememberNavController()
    // Simulate timer-based habit data for Pink theme
    HabitInformationScreenContent(
        navController = navController,
        habitPrimaryColor = PreviewHabitPink,
        selectedDate = LocalDate.now(),
        currentMonth = YearMonth.of(2022, 1),
        statsDone = "150%",
        statsOverdone = "1 day",
        statsStreak = "3/3",
        statsMissed = "0",
        calendarMarkedDaysInput = mapOf(1 to "full", 3 to "partial", 4 to "missed"), // Use status strings
        chartCompletionRate = "80%",
        chartData = listOf(2f, 0f, 3f, 0f, 4f, 0f, 3f),
        chartHighlightIndex = 4,
        chartHighlightValue = "8 min"
    )
}

@Preview(showBackground = true, name = "Habit Screen (Green - Count)")
@Composable
fun HabitInformationScreenPreview_Green() {
    val navController = rememberNavController()
    // Simulate count-based habit data for Green theme
    HabitInformationScreenContent(
        navController = navController,
        habitPrimaryColor = PreviewHabitGreen,
        selectedDate = LocalDate.now(),
        currentMonth = YearMonth.now(),
        statsDone = "60%",
        statsOverdone = "0 days",
        statsStreak = "5/5",
        statsMissed = "2",
        calendarMarkedDaysInput = mapOf(1 to "full", 2 to "full", 3 to "full", 4 to "missed", 5 to "full", 6 to "missed", 7 to "full"),
        chartCompletionRate = "71%",
        chartData = listOf(1f, 3f, 4f, 0f, 2f, 0f, 4f),
        chartHighlightIndex = 6,
        chartHighlightValue = "5 reps"
    )
}

// Extracted content for better preview management and dynamic colors
@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun HabitInformationScreenContent(
    navController: NavController,
    habitPrimaryColor: Color,
    selectedDate: LocalDate,
    currentMonth: YearMonth,
    statsDone: String,
    statsOverdone: String,
    statsStreak: String,
    statsMissed: String,
    calendarMarkedDaysInput: Map<Int, String>, // Day -> Status ("full", "partial", "missed")
    chartCompletionRate: String,
    chartData: List<Float>,
    chartHighlightIndex: Int,
    chartHighlightValue: String
) {
    val habitColors = remember(habitPrimaryColor) { generateHabitColors(habitPrimaryColor) }
    var rememberedSelectedDate by remember { mutableStateOf(selectedDate) }
    var rememberedCurrentMonth by remember { mutableStateOf(currentMonth) }

    // Convert input map to Color map for CalendarSection
    val calendarMarkedDays = remember(calendarMarkedDaysInput, habitColors) {
        calendarMarkedDaysInput.mapValues { (_, status) ->
            when (status) {
                "full" -> habitColors.primary
                "partial" -> habitColors.primaryLight
                "missed" -> Color.Red
                else -> Color.Unspecified // Or handle error
            }
        }.filterValues { it != Color.Unspecified }
    }

    Scaffold { paddingValues ->
        Column(
            modifier = Modifier
                .padding(paddingValues)
                .fillMaxSize()
        ) {

            Column(
                modifier = Modifier
                    .fillMaxWidth()
                    .weight(1f)
                    .clip(RoundedCornerShape(topStart = 24.dp, topEnd = 24.dp))
                    .background(Color.White)
                    .verticalScroll(rememberScrollState())
                    .padding(16.dp)
            ) {

//                CalendarSection(
//                    currentMonth = rememberedCurrentMonth,
//                    markedDays = calendarMarkedDays,
//                    colors = habitColors,
//                    onPreviousMonth = { rememberedCurrentMonth = rememberedCurrentMonth.minusMonths(1) },
//                    onNextMonth = { rememberedCurrentMonth = rememberedCurrentMonth.plusMonths(1) },
//                    onDateSelected = { day ->
//                        rememberedSelectedDate = rememberedCurrentMonth.atDay(day)
//                    }
//                )
//                Spacer(modifier = Modifier.height(24.dp))

//                HabitPerformanceChartSection(
//                    completionRate = chartCompletionRate,
//                    chartData = chartData,
//                    highlightIndex = chartHighlightIndex,
//                    highlightValue = chartHighlightValue,
//                    colors = habitColors,
//                    onDetailsClick = { /* Preview action */ }
//                )
                Spacer(modifier = Modifier.height(16.dp))
            }
        }
    }
}








